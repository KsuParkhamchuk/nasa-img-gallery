{"version":3,"sources":["components/Header/index.tsx","selectors/index.ts","components/LatestImgs/index.tsx","components/CurrentImg/index.tsx","actions/index.ts","components/Catalog/index.tsx","components/WelcomePage/index.tsx","App.tsx","serviceWorker.ts","middleware/index.tsx","constants/index.tsx","history/index.tsx","reducers/images.ts","reducers/index.ts","store/init.ts","index.tsx","img/nasa.png","img/satr-back.jpg"],"names":["Header","className","to","src","nasaLogo","alt","React","Component","getSelectedImg","state","undefined","images","selectedImgObj","url","getMonthImgs","imgObjects","LatestImgs","this","props","latestImgs","map","item","CurrentImg","changeCurrentImg","e","addImgToLatest","setState","selectedDate","target","value","setNewImg","getSelectedDateImg","latestSelectedDate","currentDate","today","Date","getFullYear","getMonth","getDate","localStorage","getItem","find","dateImg","mediaType","id","type","max","onChange","style","backgroundImage","width","height","title","explanation","mapDispatchToProps","dispatch","getState","callAPI","connect","Catalog","openModal","itemIndex","dataset","open","modalImgInfo","monthImages","handleClose","handleChange","event","valueType","selectedMonth","callApi","selectedYear","clearArray","counter","getImgs","months","monthName","monthValue","years","String","FormControl","InputLabel","Select","labelId","MenuItem","i","date","disabled","img","ind","onClick","data-id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","Typography","gutterBottom","DialogActions","Button","autoFocus","imgDate","payload","WelcomePage","sky","App","parentName","exact","path","component","Boolean","window","location","hostname","match","camelize","require","decamelize","axios","interceptors","response","use","error","status","href","invokeAPI","config","fullOrRelativeUrl","startsWith","relativeUrl","substring","makeFullUrl","then","json","data","Promise","resolve","JSON","parse","statusText","store","next","action","actionType","apiConfig","withCredentials","Error","actionWithPayload","finalAction","catch","reject","history","createHistory","basename","hashType","defaultState","imgReducer","setItem","load","rootReducer","combineReducers","composeEnhancers","composeWithDevTools","features","pause","lock","jump","skip","test","reorder","persist","export","createStore","applyMiddleware","thunk","apiMiddleware","routerMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.860026d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './style.css'\r\nimport nasaLogo from \"../../img/nasa.png\";\r\n\r\nclass Header extends React.Component<any> {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <nav className=\"header__navigation\">\r\n          <Link to='/' className=\"nasaLogo\">\r\n            <img src={nasaLogo} alt=\"\"/>\r\n          </Link>\r\n          <Link to=\"/nasa-img-gallery\" className=\"header__navigation--link\">\r\n            CURRENT IMAGE\r\n          </Link>\r\n          <Link to=\"/catalog\" className=\"header__navigation--link\">\r\n            CATALOG\r\n          </Link>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import { IRootState } from \"../reducers\";\r\n\r\nexport const getSelectedImg = (state: IRootState): any => {\r\n    if(state.images.selectedImgObj.url === undefined){\r\n        return 'undefined'\r\n    }\r\n    return state.images.selectedImgObj\r\n}\r\n\r\nexport const getMonthImgs = (state: IRootState): any => state.images.imgObjects\r\n","import React from \"react\";\r\nimport { LatestImgsModel } from \"./models\";\r\nimport \"./style.css\";\r\n\r\nclass LatestImgs extends React.Component<\r\n  LatestImgsModel.Props,\r\n  LatestImgsModel.State\r\n> {\r\n  render() {\r\n    return (\r\n      <div className=\"latestImgs\">\r\n        <div className=\"latestImgs__title\">Latest images</div>\r\n        <div className=\"latestImgs__content\">\r\n        <div className=\"latestImgs__content--wrapper\">\r\n          {this.props.latestImgs.map((item) => (\r\n            <div className=\"latestImgs__wrapper--item\">\r\n              <img src={item} alt=\"\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LatestImgs;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { CurrentImgModel } from \"./models\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport { getSelectedImg } from \"../../selectors\";\r\nimport LatestImgs from \"../LatestImgs\";\r\n\r\nclass CurrentImg extends React.Component<CurrentImgModel.Props, CurrentImgModel.State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selectedDate: \"\",\r\n      latestSelectedDate: \"\",\r\n      currentDate: \"\",\r\n      latestImgs: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    let today = new Date();\r\n    this.setState({\r\n      currentDate: today.getFullYear() + \"-0\" + (today.getMonth() + 1) + \"-\" + today.getDate(),\r\n      latestSelectedDate:  localStorage.getItem(\"latestSelectedDate\") === null ? this.state.currentDate : localStorage.getItem(\"latestSelectedDate\"),\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getSelectedDateImg(this.state.latestSelectedDate);\r\n  }\r\n\r\n  changeCurrentImg = (e: any) => {\r\n    this.addImgToLatest();\r\n    this.setState(\r\n      {\r\n        selectedDate: e.target.value,\r\n      },\r\n      this.setNewImg\r\n    );\r\n  };\r\n\r\n  addImgToLatest() {\r\n    let result = this.state.latestImgs.find((item) => item === this.props.dateImg.url);\r\n    if (result === undefined && this.props.dateImg.mediaType !== 'video') {\r\n      this.setState({\r\n        latestImgs: [...this.state.latestImgs, this.props.dateImg.url],\r\n      });\r\n    }\r\n  }\r\n\r\n  setNewImg = () => {\r\n    this.props.getSelectedDateImg(this.state.selectedDate);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"holder\">\r\n        <div className=\"dateImg\">\r\n          <input\r\n            className=\"calendar\"\r\n            id=\"outlined-basic\"\r\n            type=\"date\"\r\n            value={this.state.selectedDate}\r\n            max={this.state.currentDate}\r\n            onChange={(e) => this.changeCurrentImg(e)}\r\n          />\r\n          {this.props.dateImg.mediaType === \"image\" ? (\r\n            <div\r\n              className=\"dateImg__wrapper\"\r\n              style={{\r\n                backgroundImage: `url(${this.props.dateImg.url})`,\r\n              }}\r\n            ></div>\r\n          ) : (\r\n            <div className=\"dateVideo__wrapper\">\r\n              <iframe\r\n                width=\"570\"\r\n                height=\"415\"\r\n                src={this.props.dateImg.url}\r\n              ></iframe>\r\n            </div>\r\n          )}\r\n          <div className=\"dateImg__description\">\r\n            <div className=\"dateImg__description--title\">\r\n              {this.props.dateImg.title}\r\n            </div>\r\n            <div className=\"dateImg__description--text\">\r\n              {this.props.dateImg.explanation}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <LatestImgs latestImgs={this.state.latestImgs}></LatestImgs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  dateImg: getSelectedImg(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getSelectedDateImg: actions.getSelectedDateImg,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentImg);\r\n","import { IRootState } from \"../reducers\"\r\n\r\nexport const getSelectedDateImg = (selectedDate: string) => {\r\n    return (dispatch: (action: any) => Promise<any>, getState: () => IRootState) => {\r\n      return dispatch({\r\n        type: 'GET_SELECTED_DATE_IMG',\r\n        callAPI: 'https://api.nasa.gov/planetary/apod?api_key=s0Bgn85OLjsXTfgCmhRgAAiu5fjVJrh2KJ5lqeZ7&date='+ selectedDate\r\n      })\r\n    }\r\n}\r\n\r\nexport const getImgs = (imgDate:string) => {\r\n  return (dispatch: (action: any) => Promise<any>, getState: () => IRootState) => {\r\n      return dispatch({\r\n        type: 'GET_ALL_MONTH_IMG',\r\n        callAPI: 'https://api.nasa.gov/planetary/apod?api_key=s0Bgn85OLjsXTfgCmhRgAAiu5fjVJrh2KJ5lqeZ7&date='+ imgDate,\r\n      })\r\n  }\r\n}\r\n\r\nexport  const clearImgArray = () =>({\r\n  type: 'CLEAR_ARRAY',\r\n  payload: []\r\n})\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport * as actions from \"../../actions\";\r\nimport { getMonthImgs } from \"../../selectors\";\r\nimport { CatalogModel } from \"./models\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nclass Catalog extends React.Component<CatalogModel.Props, CatalogModel.State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      modalImgInfo: {},\r\n      months: [\r\n        { monthName: \"January\", monthValue: \"01\" },\r\n        { monthName: \"February\", monthValue: \"02\" },\r\n        { monthName: \"March\", monthValue: \"03\" },\r\n        { monthName: \"April\", monthValue: \"04\" },\r\n        { monthName: \"May\", monthValue: \"05\" },\r\n        { monthName: \"June\", monthValue: \"06\" },\r\n        { monthName: \"July\", monthValue: \"07\" },\r\n        { monthName: \"August\", monthValue: \"08\" },\r\n        { monthName: \"September\", monthValue: \"09\" },\r\n        { monthName: \"October\", monthValue: \"10\" },\r\n        { monthName: \"November\", monthValue: \"11\" },\r\n        { monthName: \"December\", monthValue: \"12\" },\r\n      ],\r\n      years: [\"2020\", \"2019\", \"2018\", \"2017\"],\r\n      selectedMonth: \"\",\r\n      selectedYear: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.clearArray();\r\n    let today = new Date();\r\n    let counter = today.getDate();\r\n    while (counter !== -1) {\r\n      this.props.getImgs(\r\n        today.getFullYear() + \"-0\" + (today.getMonth() + 1) + \"-\" + counter\r\n      );\r\n      counter--;\r\n    }\r\n\r\n    this.setState({\r\n      selectedMonth: \"0\" + (today.getMonth() + 1),\r\n      selectedYear: String(today.getFullYear()),\r\n    });\r\n  }\r\n\r\n  openModal = (e: any) => {\r\n    let itemIndex = e.target.dataset.id;\r\n    this.setState({\r\n      open: true,\r\n      modalImgInfo: this.props.monthImages[itemIndex],\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    });\r\n  };\r\n\r\n  handleChange = (event: any, valueType: string) => {\r\n    if (valueType === \"month\") {\r\n      this.setState(\r\n        {\r\n          selectedMonth: event.target.value,\r\n        },\r\n        this.callApi\r\n      );\r\n    } else {\r\n      this.setState(\r\n        {\r\n          selectedYear: event.target.value,\r\n        },\r\n        this.callApi\r\n      );\r\n    }\r\n  };\r\n\r\n  callApi = () => {\r\n    this.props.clearArray();\r\n    let counter = 1;\r\n    while (counter !== 28) {\r\n      this.props.getImgs(\r\n        this.state.selectedYear + \"-\" + this.state.selectedMonth + \"-\" + counter\r\n      );\r\n      counter++;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"catalog\">\r\n        <div className=\"catalog__header\">\r\n          <div className=\"catalog__header--text\">Nasa Image Gallery</div>\r\n          <div className=\"filterInputs\">\r\n            <FormControl className=\"catalog__selectInput\">\r\n              <InputLabel id=\"demo-simple-select-label\">Month</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={this.state.selectedMonth}\r\n                onChange={(e) => this.handleChange(e, \"month\")}\r\n              >\r\n                <MenuItem value=\"\">Month</MenuItem>\r\n                {this.state.months.map((item, i) => {\r\n                  let date = new Date();\r\n                  if(+item.monthValue <= (date.getMonth() + 1)){\r\n                    return <MenuItem value={item.monthValue}>{item.monthName}</MenuItem>\r\n                  } else{\r\n                    return <MenuItem value={item.monthValue} disabled>{item.monthName}</MenuItem>\r\n                  }\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className=\"catalog__selectInput\">\r\n              <InputLabel id=\"demo-simple-select-label\">Year</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={this.state.selectedYear}\r\n                onChange={(e) => this.handleChange(e, \"year\")}\r\n              >\r\n                {this.state.years.map((item, i) => (\r\n                  <MenuItem value={item}>{item}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"catalog__gallery\">\r\n          {this.props.monthImages.map((img: any, ind: any) => (\r\n            <div className=\"catalog__gallery--item\">\r\n              {img.mediaType === \"image\" ? (\r\n                <div\r\n                  className=\"content\"\r\n                  onClick={(e) => this.openModal(e)}\r\n                  style={{ backgroundImage: `url(${img.url})` }}\r\n                  data-id={ind}\r\n                ></div>\r\n              ) : (\r\n                <div className=\"content\" data-id={ind}>\r\n                  <iframe width=\"100%\" height=\"100%\" src={img.url}></iframe>\r\n                </div>\r\n              )}\r\n              <div className=\"itemOppositeSide\">\r\n                <span>{img.title}</span>\r\n              </div>\r\n              <button\r\n                className=\"learnMoreBtn\"\r\n                data-id={ind}\r\n                onClick={(e) => this.openModal(e)}\r\n              >\r\n                Read explanation\r\n              </button>\r\n            </div>\r\n          ))}\r\n          <Dialog\r\n            onClose={this.handleClose}\r\n            aria-labelledby=\"customized-dialog-title\"\r\n            open={this.state.open}\r\n          >\r\n            <DialogTitle id=\"customized-dialog-title\">\r\n              {this.state.modalImgInfo.title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <Typography gutterBottom>\r\n                <span className=\"bold\">Date: </span>\r\n                {this.state.modalImgInfo.date}\r\n              </Typography>\r\n              <Typography gutterBottom className=\"modalExplanation\">\r\n                <span className=\"bold\">Explanation: </span>\r\n                {this.state.modalImgInfo.explanation}\r\n              </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                autoFocus\r\n                onClick={this.handleClose}\r\n                className=\"closeModalBtn\"\r\n              >\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  monthImages: getMonthImgs(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getImgs: actions.getImgs,\r\n  clearArray: actions.clearImgArray,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Catalog);\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport sky from \"../../img/satr-back.jpg\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass WelcomePage extends React.Component<any> {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"starBackground\"\r\n        style={{\r\n          backgroundImage: `url(${sky}`,\r\n        }}>\r\n        <div className=\"welcomeBanner\">\r\n          <div className=\"welcomeBanner__content\">\r\n            <h1 className=\"welcomeBanner__content--title\">\r\n              Welcome to NASA images gallery\r\n            </h1>\r\n            <div className=\"welcomeBanner__content--subtitle\">One of the biggest star galleries in the world</div>\r\n            <div className=\"welcomeBanner__content--line\"></div>\r\n            <div className=\"welcomeBanner__content--buttons\">\r\n              <Link to=\"/nasa-img-gallery\" className=\"link\">\r\n                CURRENT IMAGE\r\n              </Link>\r\n              <Link to=\"/catalog\" className=\"link\">\r\n                CATALOG\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WelcomePage;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport CurrentImg from './components/CurrentImg'\r\nimport Catalog from './components/Catalog'\r\nimport WelcomePage from './components/WelcomePage'\r\nimport { Route, Switch} from 'react-router-dom'\r\n\r\n\r\n\r\nclass App extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      parentName: 'App'\r\n    }\r\n  }\r\n\r\n \r\n  render() {\r\n    return (\r\n    <div>\r\n      <Header />\r\n          <Switch>\r\n          <Route exact path='/' component={WelcomePage}/>\r\n            <Route  path='/nasa-img-gallery' component={CurrentImg} />\r\n            <Route  path='/catalog' component={Catalog} />\r\n          </Switch>  \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosRequestConfig } from 'axios'\r\nimport { ERROR, START, SUCCESS } from '../constants'\r\n\r\nconst camelize = require('camelize')\r\nconst decamelize = require('decamelize-keys-deep')\r\n\r\nconst API_ROOT = '';\r\n\r\nconst camelizeJson = (json: any): any => {\r\n    let result: any = null\r\n  \r\n    if (typeof json === 'object') {\r\n      result = camelize(decamelize(json))\r\n    } else if (typeof json === 'string') {\r\n      result = camelize(decamelize(JSON.parse(json)))\r\n    } else {\r\n      result = json\r\n    }\r\n  \r\n    return result\r\n  }\r\n  \r\nconst makeFullUrl = (fullOrRelativeUrl: string = ''): string => {\r\n    if (fullOrRelativeUrl.startsWith('http') || fullOrRelativeUrl.startsWith('data:image')) return fullOrRelativeUrl\r\n  \r\n    // create relative url\r\n    const relativeUrl = fullOrRelativeUrl.startsWith('/') ? fullOrRelativeUrl.substring(1) : fullOrRelativeUrl\r\n  \r\n    // compose full url\r\n    return API_ROOT + relativeUrl\r\n  }\r\n  \r\naxios.interceptors.response.use(\r\n  (response: any) => {\r\n    return response\r\n  },\r\n  function(error: any) {\r\n    if (error.response.status === 401) {\r\n      window.location.href = '/'\r\n    }\r\n    if (error.response.status === 403) {\r\n      window.location.href = '#/forbidden'\r\n    }\r\n    throw error\r\n  }\r\n)\r\n\r\n// Fetches an API response and normalizes the result JSON according to schema.\r\n// This makes every API response have the same shape, regardless of how nested it was.\r\nconst invokeAPI = (config: AxiosRequestConfig) => {\r\n  // compose full url\r\n  config.url = makeFullUrl(config.url)\r\n\r\n  // send request\r\n  return axios(config).then((response: any) => {\r\n    const data = response.data\r\n    if (!!!data) {\r\n      return Promise.resolve({\r\n        status: response.status,\r\n        statusText: response.statusText\r\n      })\r\n    }\r\n    return typeof data === 'object' ? Promise.resolve(camelizeJson(data)) : Promise.resolve(data)\r\n  })\r\n}\r\n\r\n// A Redux middleware that interprets actions with CALL_API info specified.\r\n// Performs the call and promises when such actions are dispatched.\r\nexport default (store: any) => (next: any) => (action: any) => {\r\n  const { callAPI, type: actionType } = action\r\n  \r\n  if (typeof callAPI === 'undefined') {\r\n    return next(action)\r\n  }\r\n\r\n  let apiConfig: AxiosRequestConfig = {\r\n    withCredentials: false\r\n  }\r\n\r\n  if (typeof callAPI === 'string') {\r\n    apiConfig.url = callAPI\r\n  } \r\n  else if (typeof callAPI === 'function') {\r\n    apiConfig.url = callAPI(store.getState())\r\n  } \r\n  else if (typeof callAPI === 'object') {\r\n    apiConfig = {\r\n      ...apiConfig,\r\n      ...callAPI\r\n    }\r\n  } else {\r\n    throw new Error(`Unsupported type of callAPI parameter, typeof callAPI is '${typeof callAPI}'`)\r\n  }\r\n\r\n  let actionWithPayload = (data: any) => {\r\n    const finalAction = {\r\n      ...action,\r\n      ...data\r\n    }\r\n    delete finalAction.callAPI\r\n    return finalAction\r\n  }\r\n  \r\n  next(actionWithPayload({ type: actionType + START }))\r\n\r\n  return invokeAPI(apiConfig)\r\n    .then((response: any) => {\r\n \r\n      next(actionWithPayload({ type: actionType + SUCCESS, response }))\r\n      return Promise.resolve(response)\r\n    })\r\n    .catch((error: any) => {\r\n      next(actionWithPayload({ type: actionType + ERROR, error }))\r\n      return Promise.reject(error)\r\n    })\r\n}\r\n","export const START = '_START'\r\nexport const SUCCESS = '_SUCCESS'\r\nexport const ERROR = '_ERROR'","import createHistory from 'history/createHashHistory'\r\n\r\nconst history = createHistory({\r\n  basename: '', // portal#/home\r\n  hashType: 'slash' // is #/home\r\n})\r\n\r\nexport default history\r\n","import { START, SUCCESS, ERROR } from \"../constants\"\r\n\r\n\r\ninterface IImgState {\r\n  selectedImgObj: Object,\r\n  imgObjects: Array<Object>\r\n}\r\n\r\nconst defaultState = {\r\n  selectedImgObj: {},\r\n  imgObjects: []\r\n} as IImgState\r\n\r\nfunction imgReducer(state: IImgState = defaultState, action: any) {\r\n \r\n  const { type, payload, response } = action\r\n  if (response !== undefined) {\r\n    localStorage.setItem(\"latestSelectedDate\", response.date);\r\n  }\r\n\r\n  switch (type) {\r\n    case 'GET_SELECTED_DATE_IMG' + START:\r\n\r\n      return {\r\n        ...state,\r\n        load: true,\r\n        ...payload\r\n      }\r\n\r\n    case 'GET_SELECTED_DATE_IMG' + SUCCESS:\r\n\r\n      return {\r\n        ...state,\r\n        selectedImgObj: response,\r\n      }\r\n    case 'GET_SELECTED_DATE_IMG' + ERROR:\r\n\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n        error: true\r\n      }\r\n\r\n    case 'GET_ALL_MONTH_IMG' + SUCCESS:\r\n      return {\r\n        ...state,\r\n        imgObjects: [...state.imgObjects, response]\r\n      }\r\n\r\n    case 'CLEAR_ARRAY':\r\n      return {\r\n        ...state,\r\n        imgObjects: [],\r\n      }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default imgReducer\r\n","import images from './images'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nexport interface IRootState {\r\n    images: any,\r\n}\r\n\r\nconst rootReducer = combineReducers<IRootState>({\r\n    images,\r\n})\r\n\r\nexport default rootReducer","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport thunk from 'redux-thunk'\r\nimport apiMiddleware from '../middleware'\r\nimport { routerMiddleware } from 'react-router-redux'\r\nimport history from '../history'\r\n\r\n//import monitorReducersEnhancer from './enhancers/monitorReducers'\r\n//import loggerMiddleware from './middleware/logger'\r\nimport rootReducer from '../reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\r\n\r\n/** Configure Redux DevTools **/\r\nconst composeEnhancers = composeWithDevTools({\r\n  features: {\r\n    pause: true, // start/pause recording of dispatched actions\r\n    lock: true, // lock/unlock dispatching actions and side effects\r\n    jump: true, // jump back and forth (time travelling)\r\n    skip: true, // skip (cancel) actions\r\n    dispatch: true, // dispatch custom actions or action creators\r\n    test: false, // generate tests for the selected actions\r\n    reorder: false, // drag and drop actions in the history list\r\n    persist: false, // persist states on page reloading\r\n    export: false // export history of actions in a file\r\n  }\r\n})\r\n\r\nconst getMiddleware = () => {\r\n\r\n  return applyMiddleware(thunk, apiMiddleware, routerMiddleware(history))\r\n}\r\n\r\n\r\nexport default function configureStore() {\r\n\r\n  const store = createStore(rootReducer, composeEnhancers(getMiddleware()))\r\n\r\n  return store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport configureStore from './store/init';\nimport { Provider } from 'react-redux';\n\n\nconst store = configureStore()\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/nasa.2528d18a.png\";","module.exports = __webpack_public_path__ + \"static/media/satr-back.df95af7d.jpg\";"],"sourceRoot":""}