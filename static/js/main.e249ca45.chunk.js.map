{"version":3,"sources":["components/Header/index.tsx","selectors/index.ts","components/CurrentImg/index.tsx","actions/index.ts","components/Catalog/index.tsx","App.tsx","serviceWorker.ts","middleware/index.tsx","constants/index.tsx","history/index.tsx","reducers/images.ts","reducers/index.ts","store/init.ts","index.tsx"],"names":["Header","className","src","alt","to","React","Component","getSelectedImg","state","undefined","images","selectedImgObj","url","getMonthImgs","imgObjects","CurrentImg","props","changeCurrentImg","e","setState","selectedDate","target","value","setNewImg","getSelectedDateImg","latestSelectedDate","currentDate","today","Date","this","getFullYear","getMonth","getDate","localStorage","getItem","id","type","max","onChange","dateImg","mediaType","style","backgroundImage","width","height","title","explanation","mapDispatchToProps","dispatch","getState","callAPI","connect","Catalog","openModal","itemIndex","dataset","open","modalImgInfo","monthImages","handleClose","counter","getImgs","map","img","ind","onClick","data-id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","Typography","gutterBottom","date","DialogActions","Button","autoFocus","imgDate","App","parentName","path","component","Boolean","window","location","hostname","match","camelize","require","decamelize","axios","interceptors","response","use","error","status","href","invokeAPI","config","fullOrRelativeUrl","startsWith","relativeUrl","substring","makeFullUrl","then","json","data","Promise","resolve","JSON","parse","statusText","store","next","action","actionType","apiConfig","withCredentials","Error","actionWithPayload","finalAction","catch","reject","history","createHistory","basename","hashType","defaultState","imgReducer","payload","setItem","load","rootReducer","combineReducers","composeEnhancers","composeWithDevTools","features","pause","lock","jump","skip","test","reorder","persist","export","createStore","applyMiddleware","thunk","apiMiddleware","routerMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e249ca45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './style.css'\r\n\r\nclass Header extends React.Component<any> {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <img src=\"img/nasa.png\" className=\"nasaLogo\" alt=\"\"/>\r\n        <nav className=\"header__navigation\">\r\n          <Link to=\"/nasa-img-gallery\" className=\"header__navigation--link\">\r\n            CURRENT IMAGE\r\n          </Link>\r\n          <Link to=\"/catalog\" className=\"header__navigation--link\">\r\n            CATALOG\r\n          </Link>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import { IRootState } from \"../reducers\";\r\n\r\nexport const getSelectedImg = (state: IRootState): any => {\r\n    if(state.images.selectedImgObj.url === undefined){\r\n        return 'undefined'\r\n    }\r\n    return state.images.selectedImgObj\r\n}\r\n\r\nexport const getMonthImgs = (state: IRootState): any => state.images.imgObjects\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { CurrentImgModel } from \"./models\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport { getSelectedImg } from \"../../selectors\";\r\n\r\nclass CurrentImg extends React.Component<CurrentImgModel.Props,CurrentImgModel.State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selectedDate: \"\",\r\n      latestSelectedDate: \"\",\r\n      currentDate: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    let today = new Date();\r\n    this.setState({\r\n      currentDate:\r\n        today.getFullYear() +\r\n        \"-0\" +\r\n        (today.getMonth() + 1) +\r\n        \"-\" +\r\n        today.getDate(),\r\n      latestSelectedDate: localStorage.getItem(\"latestSelectedDate\"),\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getSelectedDateImg(this.state.latestSelectedDate);\r\n  }\r\n\r\n  changeCurrentImg = (e: any) => {\r\n    this.setState(\r\n      {\r\n        selectedDate: e.target.value,\r\n      },\r\n      this.setNewImg\r\n    );\r\n  };\r\n\r\n  setNewImg = () => {\r\n    this.props.getSelectedDateImg(this.state.selectedDate);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dateImg\">\r\n        <input\r\n          className=\"calendar\"\r\n          id=\"outlined-basic\"\r\n          type=\"date\"\r\n          max={this.state.currentDate}\r\n          onChange={(e) => this.changeCurrentImg(e)}\r\n        />\r\n        {this.props.dateImg.mediaType === \"image\" \r\n        ? (\r\n          <div\r\n            className=\"dateImg__wrapper\"\r\n            style={{\r\n              backgroundImage: `url(${this.props.dateImg.url})`,\r\n            }}\r\n          ></div>\r\n          ) : (\r\n          <div className=\"dateVideo__wrapper\">\r\n            <iframe\r\n              width=\"570\"\r\n              height=\"415\"\r\n              src={this.props.dateImg.url}\r\n            ></iframe>\r\n          </div>\r\n        )}\r\n        <div className=\"dateImg__description\">\r\n          <div className=\"dateImg__description--title\">\r\n            {this.props.dateImg.title}\r\n          </div>\r\n          <div className=\"dateImg__description--text\">\r\n            {this.props.dateImg.explanation}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  dateImg: getSelectedImg(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getSelectedDateImg: actions.getSelectedDateImg,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentImg);\r\n","import { IRootState } from \"../reducers\"\r\n\r\nexport const getSelectedDateImg = (selectedDate: string) => {\r\n    return (dispatch: (action: any) => Promise<any>, getState: () => IRootState) => {\r\n      // call api\r\n      return dispatch({\r\n        type: 'GET_SELECTED_DATE_IMG',\r\n        callAPI: 'https://api.nasa.gov/planetary/apod?api_key=s0Bgn85OLjsXTfgCmhRgAAiu5fjVJrh2KJ5lqeZ7&date='+ selectedDate\r\n      })\r\n    }\r\n}\r\n\r\nexport const getImgs = (imgDate:string) => {\r\n  return (dispatch: (action: any) => Promise<any>, getState: () => IRootState) => {\r\n    \r\n      return dispatch({\r\n        type: 'GET_ALL_MONTH_IMG',\r\n        callAPI: 'https://api.nasa.gov/planetary/apod?api_key=s0Bgn85OLjsXTfgCmhRgAAiu5fjVJrh2KJ5lqeZ7&date='+ imgDate,\r\n      })\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport * as actions from \"../../actions\";\r\nimport { getMonthImgs } from \"../../selectors\";\r\nimport {CatalogModel} from './models'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass Catalog extends React.Component<CatalogModel.Props, CatalogModel.State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      modalImgInfo: {}\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    let today = new Date();\r\n    let counter = today.getDate();\r\n    while (counter !== -1) {\r\n      this.props.getImgs(\r\n        today.getFullYear() + \"-0\" + (today.getMonth() + 1) + \"-\" + counter\r\n      );\r\n      counter--;\r\n    }\r\n  }\r\n\r\n  openModal = (e:any) =>{\r\n    let itemIndex = e.target.dataset.id;\r\n    this.setState ({\r\n        open: true,\r\n        modalImgInfo: this.props.monthImages[itemIndex]\r\n    })\r\n  }\r\n\r\n  handleClose = () =>{\r\n    this.setState ({\r\n        open: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"catalog\">\r\n        <div className=\"catalog__header\">\r\n          <div className=\"catalog__header--text\">Nasa Image Gallery</div>\r\n        </div>\r\n        <div className=\"catalog__gallery\">\r\n          {this.props.monthImages.map((img: any, ind: any) => (\r\n            <div className=\"catalog__gallery--item\">\r\n              {img.mediaType === \"image\" \r\n              ? \r\n                <div\r\n                  className=\"content\"\r\n                  onClick={(e) => this.openModal(e)} style={{backgroundImage: `url(${img.url})`,}} data-id={ind}>    \r\n                </div>\r\n               : \r\n                <div className=\"content\" data-id={ind}>\r\n                  <iframe  width=\"100%\" height=\"100%\" src={img.url}></iframe>\r\n                </div>\r\n              }\r\n              <div className=\"itemOppositeSide\">\r\n                <span>{img.title}</span>\r\n              </div>\r\n              <button className=\"learnMoreBtn\" data-id={ind} onClick={(e) => this.openModal(e)}>Read explanation</button>\r\n            </div>\r\n          ))}\r\n          <Dialog onClose={this.handleClose} aria-labelledby=\"customized-dialog-title\" open={this.state.open}>\r\n            <DialogTitle id=\"customized-dialog-title\">\r\n              {this.state.modalImgInfo.title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n            <Typography gutterBottom>\r\n             <span className=\"bold\">Date: </span>{this.state.modalImgInfo.date}\r\n              </Typography>\r\n              <Typography gutterBottom className=\"modalExplanation\">\r\n             <span className=\"bold\">Explanation: </span>{this.state.modalImgInfo.explanation}\r\n              </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button autoFocus onClick={this.handleClose} className=\"closeModalBtn\">\r\n               Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  monthImages: getMonthImgs(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getImgs: actions.getImgs,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Catalog);\r\n","import React from 'react';\n\nimport './App.css';\nimport Header from './components/Header';\nimport CurrentImg from './components/CurrentImg'\nimport Catalog from './components/Catalog'\nimport { Route, Switch} from 'react-router-dom'\n\n\n\nclass App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parentName: 'App'\n    }\n  }\n\n \n  render() {\n    return (\n    <div>\n       <Header />\n          <Switch>\n            <Route  path='/nasa-img-gallery' component={CurrentImg} />\n            <Route  path='/catalog' component={Catalog} />\n          </Switch>  \n    </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosRequestConfig } from 'axios'\r\nimport { ERROR, START, SUCCESS } from '../constants'\r\n\r\nconst camelize = require('camelize')\r\nconst decamelize = require('decamelize-keys-deep')\r\n\r\nconst API_ROOT = '';\r\n\r\nconst camelizeJson = (json: any): any => {\r\n    let result: any = null\r\n  \r\n    if (typeof json === 'object') {\r\n      result = camelize(decamelize(json))\r\n    } else if (typeof json === 'string') {\r\n      result = camelize(decamelize(JSON.parse(json)))\r\n    } else {\r\n      result = json\r\n    }\r\n  \r\n    return result\r\n  }\r\n  \r\nconst makeFullUrl = (fullOrRelativeUrl: string = ''): string => {\r\n    if (fullOrRelativeUrl.startsWith('http') || fullOrRelativeUrl.startsWith('data:image')) return fullOrRelativeUrl\r\n  \r\n    // create relative url\r\n    const relativeUrl = fullOrRelativeUrl.startsWith('/') ? fullOrRelativeUrl.substring(1) : fullOrRelativeUrl\r\n  \r\n    // compose full url\r\n    return API_ROOT + relativeUrl\r\n  }\r\n  \r\naxios.interceptors.response.use(\r\n  (response: any) => {\r\n    return response\r\n  },\r\n  function(error: any) {\r\n    if (error.response.status === 401) {\r\n      window.location.href = '/'\r\n    }\r\n    if (error.response.status === 403) {\r\n      window.location.href = '#/forbidden'\r\n    }\r\n    throw error\r\n  }\r\n)\r\n\r\n// Fetches an API response and normalizes the result JSON according to schema.\r\n// This makes every API response have the same shape, regardless of how nested it was.\r\nconst invokeAPI = (config: AxiosRequestConfig) => {\r\n  // compose full url\r\n  config.url = makeFullUrl(config.url)\r\n\r\n  // send request\r\n  return axios(config).then((response: any) => {\r\n    const data = response.data\r\n    if (!!!data) {\r\n      return Promise.resolve({\r\n        status: response.status,\r\n        statusText: response.statusText\r\n      })\r\n    }\r\n    return typeof data === 'object' ? Promise.resolve(camelizeJson(data)) : Promise.resolve(data)\r\n  })\r\n}\r\n\r\n// A Redux middleware that interprets actions with CALL_API info specified.\r\n// Performs the call and promises when such actions are dispatched.\r\nexport default (store: any) => (next: any) => (action: any) => {\r\n  const { callAPI, type: actionType } = action\r\n  \r\n  if (typeof callAPI === 'undefined') {\r\n    return next(action)\r\n  }\r\n\r\n  let apiConfig: AxiosRequestConfig = {\r\n    withCredentials: false\r\n  }\r\n\r\n  if (typeof callAPI === 'string') {\r\n    apiConfig.url = callAPI\r\n  } \r\n  else if (typeof callAPI === 'function') {\r\n    apiConfig.url = callAPI(store.getState())\r\n  } \r\n  else if (typeof callAPI === 'object') {\r\n    apiConfig = {\r\n      ...apiConfig,\r\n      ...callAPI\r\n    }\r\n  } else {\r\n    throw new Error(`Unsupported type of callAPI parameter, typeof callAPI is '${typeof callAPI}'`)\r\n  }\r\n\r\n  let actionWithPayload = (data: any) => {\r\n    const finalAction = {\r\n      ...action,\r\n      ...data\r\n    }\r\n    delete finalAction.callAPI\r\n    return finalAction\r\n  }\r\n  \r\n  next(actionWithPayload({ type: actionType + START }))\r\n\r\n  return invokeAPI(apiConfig)\r\n    .then((response: any) => {\r\n \r\n      next(actionWithPayload({ type: actionType + SUCCESS, response }))\r\n      return Promise.resolve(response)\r\n    })\r\n    .catch((error: any) => {\r\n      next(actionWithPayload({ type: actionType + ERROR, error }))\r\n      return Promise.reject(error)\r\n    })\r\n}\r\n","export const START = '_START'\r\nexport const SUCCESS = '_SUCCESS'\r\nexport const ERROR = '_ERROR'","import createHistory from 'history/createHashHistory'\r\n\r\nconst history = createHistory({\r\n  basename: '', // portal#/home\r\n  hashType: 'slash' // is #/home\r\n})\r\n\r\nexport default history\r\n","import { START, SUCCESS, ERROR } from \"../constants\"\r\n\r\n\r\ninterface IImgState {\r\n  selectedImgObj: Object,\r\n  imgObjects: Array<Object>\r\n}\r\n\r\nconst defaultState = {\r\n  selectedImgObj: {},\r\n  imgObjects: []\r\n} as IImgState\r\n\r\nfunction imgReducer(state: IImgState = defaultState, action: any) {\r\n  const { type, payload, response } = action\r\n  if(response !== undefined){\r\n    localStorage.setItem(\"latestSelectedDate\", response.date);\r\n  }\r\n  \r\n  switch (type) {\r\n    case 'GET_SELECTED_DATE_IMG' + START:\r\n      \r\n      return {\r\n        ...state,\r\n        load: true,\r\n        ...payload\r\n      }\r\n    \r\n    case 'GET_SELECTED_DATE_IMG' + SUCCESS:\r\n          \r\n      return {\r\n        ...state,\r\n        selectedImgObj: response,\r\n      }\r\n      case 'GET_SELECTED_DATE_IMG' + ERROR:\r\n          \r\n          return {\r\n            ...state,\r\n            ...payload,\r\n            error: true\r\n          }\r\n\r\n      case 'GET_ALL_MONTH_IMG' + SUCCESS:\r\n      return{\r\n        ...state,\r\n        imgObjects: [...state.imgObjects, response]\r\n      }\r\n  }\r\n  return state\r\n}\r\n\r\nexport default imgReducer\r\n","import images from './images'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nexport interface IRootState {\r\n    images: any,\r\n}\r\n\r\nconst rootReducer = combineReducers<IRootState>({\r\n    images,\r\n})\r\n\r\nexport default rootReducer","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport thunk from 'redux-thunk'\r\nimport apiMiddleware from '../middleware'\r\nimport { routerMiddleware } from 'react-router-redux'\r\nimport history from '../history'\r\n\r\n//import monitorReducersEnhancer from './enhancers/monitorReducers'\r\n//import loggerMiddleware from './middleware/logger'\r\nimport rootReducer from '../reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\r\n\r\n/** Configure Redux DevTools **/\r\nconst composeEnhancers = composeWithDevTools({\r\n  features: {\r\n    pause: true, // start/pause recording of dispatched actions\r\n    lock: true, // lock/unlock dispatching actions and side effects\r\n    jump: true, // jump back and forth (time travelling)\r\n    skip: true, // skip (cancel) actions\r\n    dispatch: true, // dispatch custom actions or action creators\r\n    test: false, // generate tests for the selected actions\r\n    reorder: false, // drag and drop actions in the history list\r\n    persist: false, // persist states on page reloading\r\n    export: false // export history of actions in a file\r\n  }\r\n})\r\n\r\nconst getMiddleware = () => {\r\n\r\n  return applyMiddleware(thunk, apiMiddleware, routerMiddleware(history))\r\n}\r\n\r\n\r\nexport default function configureStore() {\r\n\r\n  const store = createStore(rootReducer, composeEnhancers(getMiddleware()))\r\n\r\n  return store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport configureStore from './store/init';\nimport { Provider } from 'react-redux';\n\n\nconst store = configureStore()\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}